#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# system imports

import sys
sys.path.append('.')
import os
import math
import datetime
import time

# OANDA library functions

from oandaLib import *

# Update volume on disk

def WriteVolume(pVol):
    FileHandle=open('wg.txt','w')
    FileHandle.write(f"{pVol}\n")
    FileHandle.close()

# Append to a file

def AppendFile(fn,data):
    cf=open(fn,'a')
    cf.write(data)
    cf.close()

###
### Main code base. Place order on exchange
###

Blank=" "

# Load credentials from file

broker=oanda("credentials.txt")
markets=broker.Markets

# Select the pair

pair='EUR/USD'

# Get ticker

ticker=broker.GetTicker(pair)

BuyPrice=ticker['Ask']
SellPrice=ticker['Bid']

# Set the initial position size

Units=100

# make sure our glass if full if we don't have anything.

if os.path.exists('wg.txt'):
    fh=open('wg.txt','r')
    PositionVolume=float(fh.readline().strip())
    fh.close()
else:
    order=broker.PlaceOrder(pair=pair, orderType='Market', action='Buy', amount=Units, price=BuyPrice)
    PositionVolume=Units*float(order['orderFillTransaction']['price'])
    WriteVolume(PositionVolume)

done=False
while not done:
    # Orderbook ticker values are continously updated.
    ticker=broker.GetTicker(pair)
    BuyPrice=ticker['Ask']
    SellPrice=ticker['Bid']
    Spread=SellPrice-BuyPrice

    # Get units own and calculate mid price.

    NewVol=broker.GetPositionsUnits(pair)
    MidPrice=((BuyPrice+SellPrice)/2)
    MidVol=NewVol*MidPrice

    # OANDA requires a minimum of 1 unit, Threshold is 1 unit plus 3 times the
    # spread. You pay spread on buy AND sell. 3 times spread gives a little more
    # profit, but is mostly used for brokers that allow partial units to ensure
    # profit.

    Threshold=(1+(Spread*3))

    # These are mostly for display and demonstration of the algorithm.
    # Threshold to make a buy
    bt=PositionVolume-Threshold
    # Threshold to make a sell
    st=PositionVolume+Threshold

    CurTime=(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f'))

    # Sell only when new volume is above the current positional volume by at
    # least the desired threshold.
    if (NewVol*SellPrice)>(PositionVolume+Threshold):
        SellSize=int((NewVol*SellPrice)-PositionVolume)

        if SellSize>0:
            order=broker.PlaceOrder(pair=pair, orderType='Market', action='Sell', amount=SellSize, price=SellPrice)
            Balance=broker.GetBalance()

            SellVol=SellSize*SellPrice
            t=f"{CurTime} Sell {SellPrice:8.4f} {SellVol:8.4f} {SellSize:8.4f} {Balance:12.4f}"
            print(t)
            AppendFile('oanda5.log',t+'\n')
    # Buy
    elif (NewVol*BuyPrice)<(PositionVolume-Threshold):
        BuySize=int(PositionVolume-(NewVol*BuyPrice))

        if BuySize>0:
            order=broker.PlaceOrder(pair=pair, orderType='Market', action='Buy', amount=BuySize, price=BuyPrice)
            Balance=broker.GetBalance()

            BuyVol=BuyPrice*BuySize
            t=f"{CurTime} Buy  {BuyPrice:8.4f} {BuyVol:8.4f} {BuySize:8.4f} {Balance:12.4f}"
            print(t)
            AppendFile('oanda5.log',t+'\n')

    # Simple diagnostics and flutter...

    Balance=broker.GetBalance()
    print(f"{CurTime} {Blank:4} {bt:8.4f} {MidVol:8.4f} {st:8.4f} {Balance:12.4f}")

    time.sleep(5)
